#!/usr/bin/with-contenv bash

# env check
if [[ -z "${SMA_PATH}" ]]; then
    export SMA_PATH="/usr/local/sma"
fi

if [[ -z "${SMA_STRIP_COMPONENTS}" ]]; then
    export SMA_STRIP_COMPONENTS=1
fi

if [ -f /usr/bin/apt ]; then
    ## Ubuntu
    export DEBIAN_FRONTEND="noninteractive"
    apt-get -y -qq update > /dev/null
    apt-get install --no-install-recommends -y -qq \
        wget \
        xz-utils \
        python3 \
        python3-pip \
        python3-venv \
        fontconfig \
        fonts-dejavu \
        git \
        ${SMA_EXTRA_PACKAGES} > /dev/null
    if [[ "${SMA_HWACCEL}" == "true" ]]; then
        apt-get install --no-install-recommends -y -qq \
            libva-drm2 \
            libva2 \
            i965-va-driver \
            intel-media-va-driver-non-free \
            mesa-va-drivers > /dev/null
    fi
    if [[ "${SMA_USE_REPO}" == "true" ]]; then
        apt-get install --no-install-recommends -y -qq \
            ffmpeg > /dev/null
    fi
elif [ -f /sbin/apk ]; then
    # Alpine
    apk update > /dev/null
    apk add --no-cache \
        wget \
        xz \
        python3 \
        py3-pip \
        fontconfig \
        ttf-dejavu \
        git \
        ${SMA_EXTRA_PACKAGES} > /dev/null
    apk add --no-cache py3-pymediainfo --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community > /dev/null
    if [[ "${SMA_HWACCEL}" == "true" ]]; then
        apk add --no-cache \
            libva \
            libgomp \
            vidstab \
            ca-certificates \
            libva-intel-driver \
            intel-media-driver \
            mesa-va-gallium \
            mesa-dri-gallium > /dev/null
    fi
    if [[ "${SMA_USE_REPO}" == "true" ]]; then
        apk add --no-cache \
            ffmpeg > /dev/null
    fi
fi

if [[ -f "${SMA_PATH}/manual.py" ]]; then
    # update from git
    if [[ "${SMA_UPDATE}" == "true" ]]
    then
        echo "[90-sma-config] Updating SMA from github master"
        git -C ${SMA_PATH} pull origin master --quiet
    fi
else
    # initial download
    echo "[90-sma-config] Init SMA from github master"
    git config --global --add safe.directory ${SMA_PATH}
    git -C ${SMA_PATH} init --quiet
    git -C ${SMA_PATH} remote add origin https://github.com/mdhiggins/sickbeard_mp4_automator.git
    git -C ${SMA_PATH} pull origin master --quiet
fi

# check virtual python environment
if [[ -f "${SMA_PATH}/venv/bin/python3" ]]; then
    :
else
    echo "[90-sma-config] Creating python virtual environment and installing requirements"
    python3 -m venv ${SMA_PATH}/venv
    ${SMA_PATH}/venv/bin/python3 -m pip install -q --upgrade pip --no-cache-dir > /dev/null
    ${SMA_PATH}/venv/bin/pip install -q --no-cache-dir \
        -r ${SMA_PATH}/setup/requirements.txt > /dev/null
    if [[ -z "${SMA_RS}" ]]; then
    echo "[90-sma-config] Installing additional deluge/qbittorrent requirements"
    ${SMA_PATH}/venv/bin/pip install -q --no-cache-dir \
        -r ${SMA_PATH}/setup/requirements-deluge.txt \
        -r ${SMA_PATH}/setup/requirements-qbittorrent.txt > /dev/null
    fi
fi

# ffmpeg
if [[ $(which ffmpeg) ]]; then
    :
elif [[ -n "${SMA_FFMPEG_PATH}" ]] && [[ -n "${SMA_FFPROBE_PATH}" ]]; then
    :
else
    # check ffmpeg URL
    if [[ -z "${SMA_FFMPEG_URL}" ]]; then
    architecture=$(arch)
    case "$architecture" in
        'x86_64'|'amd64')
        export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
        ;;
        'i386'|'i686')
        export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-i686-static.tar.xz"
        ;;
        'arm'|'armv7l'|'armv6l')
        export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-armhf-static.tar.xz"
        ;;
        'aarch64_be'|'aarch64'|'armv8b'|'armv8l'|'arm64')
        export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-arm64-static.tar.xz"
        ;;
        *)
        export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-$architecture-static.tar.xz"
        ;;
    esac
    echo "[90-sma-config] Set FFMPEG URL to ${SMA_FFMPEG_URL}"
    fi
    echo "[90-sma-config] Downloading and installing FFMpeg from ${SMA_FFMPEG_URL}"
    wget -q ${SMA_FFMPEG_URL} -O /tmp/ffmpeg.tar.xz
    tar --exclude='*.html' --exclude='*.txt' -xJf /tmp/ffmpeg.tar.xz -C /usr/local/bin --strip-components ${SMA_STRIP_COMPONENTS}
    chown abc:abc /usr/local/bin/ffmpeg
    chown abc:abc /usr/local/bin/ffprobe
    chmod g+x /usr/local/bin/ffmpeg
    chmod g+x /usr/local/bin/ffprobe
    rm -rf /tmp/*
fi

# permissions
chown -R abc:abc ${SMA_PATH}
chmod -R 775 ${SMA_PATH}/*.sh

# update autoprocess
${SMA_PATH}/venv/bin/python3 ${SMA_PATH}/update.py

exit $?
