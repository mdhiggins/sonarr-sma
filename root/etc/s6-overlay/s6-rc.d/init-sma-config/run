#!/usr/bin/with-contenv bash

echoprefix="[90-sma-config]"
echo "${echoprefix} SMA config initialized"
# env check
if [[ -z "${SMA_PATH}" ]]; then
    export SMA_PATH="/usr/local/sma"
fi

if [[ -z "${SMA_STRIP_COMPONENTS}" ]]; then
    export SMA_STRIP_COMPONENTS=1
fi

if [[ -z "${SMA_FFMPEG_PATH}" ]]; then
    export SMA_FFMPEG_PATH="ffmpeg"
fi

if [[ -z "${SMA_FFPROBE_PATH}" ]]; then
    export SMA_FFPROBE_PATH="ffprobe"
fi

if [[ -f /usr/bin/apt ]]; then
    ## Ubuntu
    export DEBIAN_FRONTEND="noninteractive"
    apt-get -y -qq update > /dev/null
    apt-get install --no-install-recommends -y -qq \
        wget \
        xz-utils \
        python3 \
        python3-pip \
        python3-virtualenv \
        fontconfig \
        fonts-dejavu \
        git \
        ${SMA_EXTRA_PACKAGES} > /dev/null
    if [[ "${SMA_HWACCEL}" == "true" ]]; then
        apt-get install --no-install-recommends -y -qq \
            libva-drm2 \
            libva2 \
            i965-va-driver \
            intel-media-va-driver-non-free \
            mesa-va-drivers > /dev/null
    fi
    if [[ "${SMA_NVIDIA}" == "true" ]]; then
        export NVIDIA_DRIVER_CAPABILITIES="compute,graphics,utility,video"
        export NVIDIA_VISIBLE_DEVICES="all"
        if [[ -z "${LD_LIBRARY_PATH}" ]]; then
            export LD_LIBRARY_PATH="/usr/local/cuda-11.4/lib64"
        fi
        if [[ -z "${SMA_LIBSSL}" ]]; then
            export SMA_LIBSSL="http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb"
        fi
    fi
    if [[ -n "${SMA_LIBSSL}" ]]; then
        package_filename=$(basename "${SMA_LIBSSL}")
        if ! dpkg -l | grep -q "^ii\s*${package_filename%%_*}"; then
            echo "${echoprefix} Installing libssl from ${SMA_LIBSSL}"
            wget -P /tmp "${SMA_LIBSSL}"
            dpkg -i "/tmp/${package_filename}"
            rm "/tmp/${package_filename}"
        fi
    fi
    if [[ "${SMA_USE_REPO}" == "true" ]]; then
        apt-get install --no-install-recommends -y -qq \
            ffmpeg > /dev/null
    fi
elif [[ -f /sbin/apk ]]; then
    # Alpine
    apk update > /dev/null
    apk add --no-cache \
        wget \
        xz \
        python3 \
        py3-pip \
        py3-virtualenv \
        fontconfig \
        ttf-dejavu \
        git \
        ${SMA_EXTRA_PACKAGES} > /dev/null
    if [[ "${SMA_HWACCEL}" == "true" ]]; then
        apk add --no-cache \
            libva \
            libgomp \
            vidstab \
            ca-certificates \
            libva-intel-driver \
            intel-media-driver \
            mesa-va-gallium \
            mesa-dri-gallium > /dev/null
    fi
    if [[ "${SMA_USE_REPO}" == "true" ]]; then
        apk add --no-cache \
            ffmpeg > /dev/null
    fi
fi

if [[ -f "${SMA_PATH}/manual.py" ]]; then
    # update from git
    if [[ "${SMA_UPDATE}" == "true" ]]
    then
        echo "${echoprefix} Updating SMA from github master"
        git -C ${SMA_PATH} pull origin master --quiet
    fi
else
    # initial download
    echo "${echoprefix} Init SMA from github master"
    git config --global --add safe.directory ${SMA_PATH}
    git -C ${SMA_PATH} init --quiet
    git -C ${SMA_PATH} remote add origin https://github.com/mdhiggins/sickbeard_mp4_automator.git
    git -C ${SMA_PATH} pull origin master --quiet
fi

# check virtual python environment
if [[ -f "${SMA_PATH}/venv/bin/python3" ]]; then
    :
else
    echo "${echoprefix} Creating python virtual environment and installing requirements"
    python3 -m venv ${SMA_PATH}/venv
    ${SMA_PATH}/venv/bin/python3 -m pip install -q --upgrade pip==24.0 --no-cache-dir --force-reinstall > /dev/null
    ${SMA_PATH}/venv/bin/pip install -q --no-cache-dir \
        -r ${SMA_PATH}/setup/requirements.txt > /dev/null
    if [[ -z "${SMA_RS}" ]]; then
    echo "${echoprefix} Installing additional deluge/qbittorrent requirements"
    ${SMA_PATH}/venv/bin/pip install -q --no-cache-dir \
        -r ${SMA_PATH}/setup/requirements-deluge.txt \
        -r ${SMA_PATH}/setup/requirements-qbittorrent.txt > /dev/null
    fi
fi

# ffmpeg
if [[ -f "$(which ${SMA_FFMPEG_PATH})" ]] && [[ -f "$(which ${SMA_FFPROBE_PATH})" ]]; then
    echo "${echoprefix} FFMPEG installation found $(which ${SMA_FFMPEG_PATH})"
else
    # check ffmpeg URL
    if [[ -z "${SMA_FFMPEG_URL}" ]]; then
        architecture=$(arch)
        case "$architecture" in
            'x86_64'|'amd64')
            export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
            ;;
            'i386'|'i686')
            export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-i686-static.tar.xz"
            ;;
            'arm'|'armv7l'|'armv6l')
            export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-armhf-static.tar.xz"
            ;;
            'aarch64_be'|'aarch64'|'armv8b'|'armv8l'|'arm64')
            export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-arm64-static.tar.xz"
            ;;
            *)
            export SMA_FFMPEG_URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-$architecture-static.tar.xz"
            ;;
        esac
        echo "${echoprefix} Set FFMPEG URL to ${SMA_FFMPEG_URL}"
    fi
    echo "${echoprefix} Downloading and installing FFMpeg from ${SMA_FFMPEG_URL}"
    wget -q ${SMA_FFMPEG_URL} -O /tmp/ffmpeg.tar.xz
    if [[ "${SMA_FFMPEG_PATH}" == "ffmpeg" ]] && [[ "${SMA_FFPROBE_PATH}" == "ffprobe" ]] ; then
        tar --exclude='*.html' --exclude='*.txt' -xJf /tmp/ffmpeg.tar.xz -C /usr/local/bin --strip-components ${SMA_STRIP_COMPONENTS}
        chown abc:abc /usr/local/bin/ffmpeg
        chown abc:abc /usr/local/bin/ffprobe
        chmod g+x /usr/local/bin/ffmpeg
        chmod g+x /usr/local/bin/ffprobe
    else
        mkdir /tmp/ffmpeg
        tar --exclude='*.html' --exclude='*.txt' -xJf /tmp/ffmpeg.tar.xz -C /tmp/ffmpeg --strip-components ${SMA_STRIP_COMPONENTS}
        if [ ! -d "$(dirname "$SMA_FFMPEG_PATH")" ]; then
            mkdir -p "$(dirname "$SMA_FFMPEG_PATH")"
        fi
        if [ ! -d "$(dirname "$SMA_FFPROBE_PATH")" ]; then
            mkdir -p "$(dirname "$SMA_FFPROBE_PATH")"
        fi
        mv /tmp/ffmpeg/ffmpeg "${SMA_FFMPEG_PATH}"
        mv /tmp/ffmpeg/ffprobe "${SMA_FFPROBE_PATH}"
        chown abc:abc "${SMA_FFMPEG_PATH}"
        chown abc:abc "${SMA_FFPROBE_PATH}"
        chmod g+x "${SMA_FFMPEG_PATH}"
        chmod g+x "${SMA_FFPROBE_PATH}"
    fi
    rm -rf /tmp/*
fi

# permissions
chown -R abc:abc ${SMA_PATH}
chmod -R 775 ${SMA_PATH}/*.sh

# update autoprocess
${SMA_PATH}/venv/bin/python3 ${SMA_PATH}/update.py

exit $?
